/*
 * Genome Nexus API
 * This page shows how to use HTTP requests to access the Genome Nexus API. There are more high level clients available in Python, R, JavaScript, TypeScript and various other languages as well as a command line client to annotate MAF and VCF. See https://docs.genomenexus.org/api.  Aside from programmatic clients there are web based tools to annotate variants, see https://docs.genomenexus.org/tools.   We currently only provide long-term support for the '/annotation' endpoint. The other endpoints might change.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.genome_nexus.client;

import org.genome_nexus.ApiCallback;
import org.genome_nexus.ApiClient;
import org.genome_nexus.ApiException;
import org.genome_nexus.ApiResponse;
import org.genome_nexus.Configuration;
import org.genome_nexus.Pair;
import org.genome_nexus.ProgressRequestBody;
import org.genome_nexus.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.genome_nexus.client.IsoformOverride;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IsoformOverrideControllerApi {
    private ApiClient apiClient;

    public IsoformOverrideControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IsoformOverrideControllerApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for fetchAllIsoformOverridesGET
     * @param source Override source. For example uniprot (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fetchAllIsoformOverridesGETCall(String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/isoform_override/{source}"
            .replaceAll("\\{" + "source" + "\\}", apiClient.escapeString(source.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fetchAllIsoformOverridesGETValidateBeforeCall(String source, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling fetchAllIsoformOverridesGET(Async)");
        }
        

        com.squareup.okhttp.Call call = fetchAllIsoformOverridesGETCall(source, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the isoform override information for the specified source
     * 
     * @param source Override source. For example uniprot (required)
     * @return List&lt;IsoformOverride&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IsoformOverride> fetchAllIsoformOverridesGET(String source) throws ApiException {
        ApiResponse<List<IsoformOverride>> resp = fetchAllIsoformOverridesGETWithHttpInfo(source);
        return resp.getData();
    }

    /**
     * Gets the isoform override information for the specified source
     * 
     * @param source Override source. For example uniprot (required)
     * @return ApiResponse&lt;List&lt;IsoformOverride&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IsoformOverride>> fetchAllIsoformOverridesGETWithHttpInfo(String source) throws ApiException {
        com.squareup.okhttp.Call call = fetchAllIsoformOverridesGETValidateBeforeCall(source, null, null);
        Type localVarReturnType = new TypeToken<List<IsoformOverride>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the isoform override information for the specified source (asynchronously)
     * 
     * @param source Override source. For example uniprot (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fetchAllIsoformOverridesGETAsync(String source, final ApiCallback<List<IsoformOverride>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fetchAllIsoformOverridesGETValidateBeforeCall(source, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<IsoformOverride>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fetchIsoformOverrideGET
     * @param source Override source. For example uniprot. (required)
     * @param transcriptId Transcript id. For example ENST00000361125. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fetchIsoformOverrideGETCall(String source, String transcriptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/isoform_override/{source}/{transcriptId}"
            .replaceAll("\\{" + "source" + "\\}", apiClient.escapeString(source.toString()))
            .replaceAll("\\{" + "transcriptId" + "\\}", apiClient.escapeString(transcriptId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fetchIsoformOverrideGETValidateBeforeCall(String source, String transcriptId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling fetchIsoformOverrideGET(Async)");
        }
        
        // verify the required parameter 'transcriptId' is set
        if (transcriptId == null) {
            throw new ApiException("Missing the required parameter 'transcriptId' when calling fetchIsoformOverrideGET(Async)");
        }
        

        com.squareup.okhttp.Call call = fetchIsoformOverrideGETCall(source, transcriptId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the isoform override information for the specified source and transcript id
     * 
     * @param source Override source. For example uniprot. (required)
     * @param transcriptId Transcript id. For example ENST00000361125. (required)
     * @return IsoformOverride
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IsoformOverride fetchIsoformOverrideGET(String source, String transcriptId) throws ApiException {
        ApiResponse<IsoformOverride> resp = fetchIsoformOverrideGETWithHttpInfo(source, transcriptId);
        return resp.getData();
    }

    /**
     * Gets the isoform override information for the specified source and transcript id
     * 
     * @param source Override source. For example uniprot. (required)
     * @param transcriptId Transcript id. For example ENST00000361125. (required)
     * @return ApiResponse&lt;IsoformOverride&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IsoformOverride> fetchIsoformOverrideGETWithHttpInfo(String source, String transcriptId) throws ApiException {
        com.squareup.okhttp.Call call = fetchIsoformOverrideGETValidateBeforeCall(source, transcriptId, null, null);
        Type localVarReturnType = new TypeToken<IsoformOverride>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the isoform override information for the specified source and transcript id (asynchronously)
     * 
     * @param source Override source. For example uniprot. (required)
     * @param transcriptId Transcript id. For example ENST00000361125. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fetchIsoformOverrideGETAsync(String source, String transcriptId, final ApiCallback<IsoformOverride> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fetchIsoformOverrideGETValidateBeforeCall(source, transcriptId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IsoformOverride>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fetchIsoformOverridePOST
     * @param source Override source. For example uniprot (required)
     * @param transcriptIds List of transcript ids. For example [\&quot;ENST00000361125\&quot;,\&quot;ENST00000443649\&quot;].  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fetchIsoformOverridePOSTCall(String source, List<String> transcriptIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = transcriptIds;

        // create path and map variables
        String localVarPath = "/isoform_override";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (source != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("source", source));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fetchIsoformOverridePOSTValidateBeforeCall(String source, List<String> transcriptIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'source' is set
        if (source == null) {
            throw new ApiException("Missing the required parameter 'source' when calling fetchIsoformOverridePOST(Async)");
        }
        
        // verify the required parameter 'transcriptIds' is set
        if (transcriptIds == null) {
            throw new ApiException("Missing the required parameter 'transcriptIds' when calling fetchIsoformOverridePOST(Async)");
        }
        

        com.squareup.okhttp.Call call = fetchIsoformOverridePOSTCall(source, transcriptIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets the isoform override information for the specified source and the list of transcript ids
     * 
     * @param source Override source. For example uniprot (required)
     * @param transcriptIds List of transcript ids. For example [\&quot;ENST00000361125\&quot;,\&quot;ENST00000443649\&quot;].  (required)
     * @return List&lt;IsoformOverride&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<IsoformOverride> fetchIsoformOverridePOST(String source, List<String> transcriptIds) throws ApiException {
        ApiResponse<List<IsoformOverride>> resp = fetchIsoformOverridePOSTWithHttpInfo(source, transcriptIds);
        return resp.getData();
    }

    /**
     * Gets the isoform override information for the specified source and the list of transcript ids
     * 
     * @param source Override source. For example uniprot (required)
     * @param transcriptIds List of transcript ids. For example [\&quot;ENST00000361125\&quot;,\&quot;ENST00000443649\&quot;].  (required)
     * @return ApiResponse&lt;List&lt;IsoformOverride&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<IsoformOverride>> fetchIsoformOverridePOSTWithHttpInfo(String source, List<String> transcriptIds) throws ApiException {
        com.squareup.okhttp.Call call = fetchIsoformOverridePOSTValidateBeforeCall(source, transcriptIds, null, null);
        Type localVarReturnType = new TypeToken<List<IsoformOverride>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets the isoform override information for the specified source and the list of transcript ids (asynchronously)
     * 
     * @param source Override source. For example uniprot (required)
     * @param transcriptIds List of transcript ids. For example [\&quot;ENST00000361125\&quot;,\&quot;ENST00000443649\&quot;].  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fetchIsoformOverridePOSTAsync(String source, List<String> transcriptIds, final ApiCallback<List<IsoformOverride>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fetchIsoformOverridePOSTValidateBeforeCall(source, transcriptIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<IsoformOverride>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for fetchIsoformOverrideSourcesGET
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call fetchIsoformOverrideSourcesGETCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/isoform_override/sources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call fetchIsoformOverrideSourcesGETValidateBeforeCall(final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = fetchIsoformOverrideSourcesGETCall(progressListener, progressRequestListener);
        return call;

    }

    /**
     * Gets a list of available isoform override data sources
     * 
     * @return List&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<String> fetchIsoformOverrideSourcesGET() throws ApiException {
        ApiResponse<List<String>> resp = fetchIsoformOverrideSourcesGETWithHttpInfo();
        return resp.getData();
    }

    /**
     * Gets a list of available isoform override data sources
     * 
     * @return ApiResponse&lt;List&lt;String&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<String>> fetchIsoformOverrideSourcesGETWithHttpInfo() throws ApiException {
        com.squareup.okhttp.Call call = fetchIsoformOverrideSourcesGETValidateBeforeCall(null, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Gets a list of available isoform override data sources (asynchronously)
     * 
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call fetchIsoformOverrideSourcesGETAsync(final ApiCallback<List<String>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = fetchIsoformOverrideSourcesGETValidateBeforeCall(progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
